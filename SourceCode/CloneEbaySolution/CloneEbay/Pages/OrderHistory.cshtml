@page
@model CloneEbay.Pages.OrderHistoryModel
@{
    ViewData["Title"] = "Order History";
}

<div class="container mt-4">
    <h2 class="mb-4">Order History</h2>

    @if (Model.OrderHistory.Orders.Count == 0)
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> You have no orders yet.
            <a href="/Products" class="btn btn-primary btn-sm ms-2">Shop now</a>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var order in Model.OrderHistory.Orders)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge @GetStatusBadgeClass(order.Status)">@GetStatusDisplayName(order.Status)</span>
                            <small class="text-muted">#@order.Id</small>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1">Order #@order.Id</h6>
                                    <p class="text-muted mb-1">@order.OrderDate.ToString("MMM dd, yyyy")</p>
                                    <p class="text-muted mb-2">@order.AddressInfo</p>
                                    <p class="mb-0"><strong>$@order.TotalPrice.ToString("F2")</strong></p>
                                    @if (!string.IsNullOrEmpty(order.CouponCode))
                                    {
                                        <small class="text-success">Coupon: @order.CouponCode</small>
                                    }
                                </div>
                            </div>
                            <div class="mb-2">
                                <strong>Items:</strong> @order.ItemCount
                            </div>
                            <a href="/OrderDetail/@order.Id" class="btn btn-outline-primary btn-sm w-100">
                                <i class="fas fa-eye"></i> View details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.OrderHistory.TotalPages > 1)
        {
            <nav aria-label="Order history pagination">
                <ul class="pagination justify-content-center">
                    @if (Model.OrderHistory.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?page=@(Model.OrderHistory.CurrentPage - 1)">Previous</a>
                        </li>
                    }

                    @for (int i = 1; i <= Model.OrderHistory.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.OrderHistory.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?page=@i">@i</a>
                        </li>
                    }

                    @if (Model.OrderHistory.CurrentPage < Model.OrderHistory.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?page=@(Model.OrderHistory.CurrentPage + 1)">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
</div>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning",
            "processing" => "bg-info",
            "shipped" => "bg-primary",
            "delivered" => "bg-success",
            "cancelled" => "bg-danger",
            "returned" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "Pending",
            "processing" => "Processing",
            "shipped" => "Shipped",
            "delivered" => "Delivered",
            "cancelled" => "Cancelled",
            "returned" => "Returned",
            _ => status ?? "Unknown"
        };
    }
} 