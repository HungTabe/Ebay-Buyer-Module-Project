Step to setup 
- Run db Buyer_Module db script
- Run sample data script

Setup Mode from DB by DBFirst Method


Hãy update code dự án razor page CloneEbay để đáp ứng yêu cầu sau đây : 
Yêu cầu tổng hợp:
Đăng ký tài khoản người dùng (email, password, xác nhận email)
Đăng nhập/đăng xuất, cập nhật thông tin cá nhân
Xem danh sách sản phẩm (phân trang, lọc theo danh mục, giá, tên...)
Xem chi tiết sản phẩm (ảnh, mô tả, người bán, đánh giá...)
Thêm sản phẩm vào giỏ hàng (Cart local & server)
Thực hiện đặt hàng (tạo đơn hàng mới)
Chọn địa chỉ giao hàng (Address - nhiều địa chỉ, chọn mặc định)
Thanh toán (giả lập qua PayPal, COD)
Xem lịch sử đơn hàng: trạng thái, chi tiết từng đơn hàng
Gửi yêu cầu hoàn trả đơn hàng
Gửi đánh giá sản phẩm (Review: số sao, bình luận)
Sử dụng mã giảm giá (Coupon)
Xem thông báo hệ thống: đơn hàng, khuyến mãi, phản hồi
✅ Bảo mật thông tin cá nhân và giao dịch (hash password, JWT, CSRF, SSL)
🚀 Tốc độ tải trang tìm kiếm và chi tiết sản phẩm phải dưới 1s
📱 Giao diện phải responsive, dễ thao tác trên mobile
⚙️ Hệ thống phải có thể mở rộng khi có nhiều user truy cập cùng lúc
🐞 Gỡ lỗi dễ qua log chi tiết và phân biệt lỗi client/server

Các yêu cầu khác (25% số điểm) Tất cả các nhóm đều phải làm 
Đáp ưng được khi lượng người dùng tăng lên: load balance, Nginx
Hạn chế số lượt request của người trong khoảng thời gian: dùng rate limiting
CI&CD: jesking gitlab action
Quản lý team. Jira
Story point: tgian hoàn thành task 
Kiểm thử về tải, an ninh mạng: Jmetter
Đảm bảo Zero Downtime khi hệ thống cập nhật. K8s

LƯU Ý
Làm giống y hệt  web ebay
Đây chỉ là những yêu cầu gợi ý tối thiếu cần đạt được (làm đủ được 80% điểm). Từng nhóm cần trải nghiệm hệ thống thực sự và làm đúng theo hệ thống đã có.


Ngày 1: Thiết lập dự án, database, và đăng ký/đăng nhập
Mục tiêu: Xây dựng nền tảng dự án, database, và tính năng đăng ký/đăng nhập.

Task (Tổng 10 SP):
Cấu hình dự án Razor Page (1 SP):
Tạo dự án ASP.NET Core Razor Page trong Visual Studio.
Cài đặt Entity Framework Core, cấu hình appsettings.json cho SQL Server.
Tạo database và dữ liệu mẫu (2 SP):
Chạy script SQL (đã cung cấp trước) để tạo database CloneEbayDB.
Thêm dữ liệu mẫu cho User, Product, Category, ProductImage, v.v.

Đăng ký tài khoản (3 SP):
Tạo Razor Page Register.cshtml để nhập email, password.
Hash password bằng BCrypt, gửi email xác nhận (giả lập qua console hoặc SMTP).
Lưu user vào bảng User với isVerified.
Đăng nhập/đăng xuất (2 SP):
Tạo Razor Page Login.cshtml, dùng JWT để tạo token sau khi đăng nhập.
Thêm nút đăng xuất, xóa token.
Cấu hình bảo mật ban đầu (2 SP):
Bật HTTPS (SSL) trong dự án.
Thêm middleware CSRF cho các form.
Công cụ: Visual Studio, SQL Server Management Studio, Jira (tạo board, task).
Kết quả: Dự án chạy được, có đăng ký/đăng nhập cơ bản, database sẵn sàng.



Ngày 2: Danh sách sản phẩm và chi tiết sản phẩm
Mục tiêu: Hoàn thành tính năng xem danh sách sản phẩm (lọc, phân trang) và chi tiết sản phẩm.

Task (Tổng 12 SP):
Danh sách sản phẩm (5 SP):
Tạo Razor Page Products/Index.cshtml.
Thêm phân trang (10 sản phẩm/trang), lọc theo danh mục, giá, tên (dùng LINQ).
Tối ưu truy vấn database để tải trang dưới 1s (dùng indexing cho Product).
Chi tiết sản phẩm (4 SP):
Tạo Razor Page Products/Details.cshtml.
Hiển thị ảnh (ProductImage), mô tả, thông tin người bán, đánh giá (Review).
Responsive UI (3 SP):
Dùng Bootstrap để giao diện responsive trên mobile.
Kiểm tra giao diện trên Chrome DevTools (mobile view).
Công cụ: Visual Studio, Chrome DevTools, Jira.
Kết quả: Người dùng có thể xem danh sách sản phẩm, lọc, và xem chi tiết sản phẩm trên cả PC và mobile.
Ngày 3: Giỏ hàng và đặt hàng
Mục tiêu: Xây dựng tính năng giỏ hàng và đặt hàng.

Task (Tổng 12 SP):
Giỏ hàng (local & server) (5 SP):
Tạo Razor Page Cart/Index.cshtml.
Lưu giỏ hàng local (session/cookie) và server (tạo bảng Cart hoặc dùng OrderItem tạm).
Thêm/xóa sản phẩm vào giỏ hàng.
Tạo đơn hàng (4 SP):
Tạo Razor Page Checkout/Index.cshtml.
Lưu đơn hàng vào OrderTable và chi tiết vào OrderItem.
Chọn địa chỉ giao hàng (3 SP):
Hiển thị danh sách địa chỉ từ Address, cho phép chọn mặc định.
Tạo form thêm/sửa địa chỉ.
Công cụ: Visual Studio, SQL Server, Jira.
Kết quả: Người mua có thể thêm sản phẩm vào giỏ hàng, đặt hàng, và chọn địa chỉ giao hàng.
Ngày 4: Thanh toán và mã giảm giá
Mục tiêu: Tích hợp thanh toán và áp dụng mã giảm giá.

Task (Tổng 10 SP):
Thanh toán giả lập (PayOS, COD) (4 SP):
Tạo Razor Page Checkout/Payment.cshtml.
Giả lập PayOS API (lưu transactionId vào Payment) và COD.
Áp dụng mã giảm giá (3 SP):
Thêm form nhập mã giảm giá trong checkout.
Kiểm tra và áp dụng từ bảng Coupon, cập nhật usedCount.
Logging lỗi thanh toán (3 SP):
Thêm logging (dùng Serilog hoặc Microsoft.Extensions.Logging) để ghi lỗi client/server.
Phân biệt lỗi giao dịch (VD: mã giảm giá không hợp lệ).
Công cụ: Visual Studio, Postman (test API PayOS), Jira.
Kết quả: Người mua có thể thanh toán (giả lập) và dùng mã giảm giá.
Ngày 5: Lịch sử đơn hàng, hoàn trả, và đánh giá
Mục tiêu: Hoàn thành các tính năng liên quan đến đơn hàng và sản phẩm.

Task (Tổng 10 SP):
Lịch sử đơn hàng (3 SP):
Tạo Razor Page Orders/Index.cshtml.
Hiển thị danh sách đơn hàng (OrderTable), trạng thái, chi tiết (OrderItem).
Yêu cầu hoàn trả (3 SP):
Tạo Razor Page Orders/Return.cshtml.
Lưu yêu cầu vào ReturnRequest với lý do và trạng thái.
Đánh giá sản phẩm (4 SP):
Tạo Razor Page Products/Review.cshtml.
Lưu đánh giá (số sao, bình luận) vào Review.
Công cụ: Visual Studio, Jira.
Kết quả: Người mua có thể xem đơn hàng, gửi yêu cầu hoàn trả, và đánh giá sản phẩm.
Ngày 6: Thông báo, bảo mật, và tối ưu
Mục tiêu: Hoàn thiện tính năng thông báo, tăng cường bảo mật, và tối ưu hiệu suất.

Task (Tổng 12 SP):
Thông báo hệ thống (3 SP):
Tạo Razor Page Notifications/Index.cshtml.
Hiển thị thông báo từ Notification (đơn hàng, khuyến mãi).
Bảo mật nâng cao (4 SP):
Thêm JWT middleware để bảo vệ các trang cần đăng nhập.
Hash password cho tất cả user mới.
Kiểm tra CSRF trên mọi form POST.
Tối ưu tốc độ (3 SP):
Thêm caching (dùng MemoryCache) cho danh sách sản phẩm và chi tiết.
Tạo index cho cột Product.title, Product.price để truy vấn nhanh.
Logging chi tiết (2 SP):
Cấu hình log riêng cho client (UI) và server (API/database).
Công cụ: Visual Studio, SQL Server, Jira.
Kết quả: Hệ thống an toàn, nhanh (<1s cho trang sản phẩm), có thông báo.
Ngày 7: CI/CD, kiểm thử, và triển khai
Mục tiêu: Cấu hình CI/CD, kiểm thử tải/bảo mật, và triển khai với zero downtime.

Task (Tổng 12 SP):
CI/CD với Jenkins/GitLab (3 SP):
Cấu hình pipeline Jenkins/GitLab Actions: build, test, deploy.
Tự động chạy unit test (dùng xUnit).
Kiểm thử tải và bảo mật (3 SP):
Dùng JMeter để test tải (100 user đồng thời).
Kiểm tra bảo mật (SQL injection, XSS) với JMeter.
Cấu hình Nginx và K8s (4 SP):
Cài Nginx làm load balancer.
Cấu hình Kubernetes (K8s) để đảm bảo zero downtime khi deploy.
Rate limiting (2 SP):
Thêm middleware rate limiting (dùng AspNetCoreRateLimit) để giới hạn request.
Công cụ: Jenkins, GitLab, JMeter, Docker, Kubernetes, Jira.
Kết quả: Hệ thống sẵn sàng triển khai, chịu tải cao, bảo mật tốt.
Quản lý team với Jira
Tạo board Jira:
Tạo epic cho mỗi nhóm tính năng (VD: “User Management”, “Product Listing”).
Chia task theo ngày, gán SP và thành viên.
Story Point:
Tổng SP: 78 (cho 7 ngày).
Mỗi thành viên đảm nhận ~15-20 SP/tuần.
Daily Scrum:
Họp 15 phút/ngày để cập nhật tiến độ, giải quyết blocker.
Lưu ý
Giống eBay: Dùng giao diện Bootstrap để mô phỏng eBay (card sản phẩm, form lọc).
Ưu tiên: Hoàn thành đăng ký/đăng nhập, danh sách sản phẩm, và đặt hàng trước.
Mở rộng: Nếu còn thời gian, thêm tính năng đấu giá (Bid) hoặc chat (Message).
Debug: Dùng log để phát hiện lỗi sớm, kiểm tra tốc độ trang bằng Chrome DevTools.

------------------------------------------------------------------------------------

Đọc lại source code và triển khai yêu cầu này giúp tôi và tôi đã install các package sau rôi "
4 CSDL
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.7
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.7
dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.7
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.7
2 JSON
dotnet add package Microsoft.Extensions.Configuration --version 8.0.0
dotnet add package Microsoft.Extensions.Configuration.Json --version 8.0.0
1 JWT and BCrypt
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.17
dotnet add package BCrypt.Net-Next --version 4.0.3

" : 
Đăng ký tài khoản (3 SP):
Tạo Razor Page Register.cshtml để nhập email, password.
Hash password bằng BCrypt, gửi email xác nhận (giả lập qua console hoặc SMTP).
Lưu user vào bảng User với isVerified.
Đăng nhập/đăng xuất (2 SP):
Tạo Razor Page Login.cshtml, dùng JWT để tạo token sau khi đăng nhập.
Thêm nút đăng xuất, xóa token.
Cấu hình bảo mật ban đầu (2 SP):
Bật HTTPS (SSL) trong dự án.
Thêm middleware CSRF cho các form.